input AddBoardInput {
  text: String!
  clientMutationId: String!
}

type AddBoardPayload {
  viewer: User
  boardEdge: BoardEdge
  clientMutationId: String!
}

type Board implements Node {
  id: ID!
  text: String
  complete: Boolean
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]
}

type BoardEdge {
  node: Board
  cursor: String!
}

input ChangeBoardStatusInput {
  id: ID!
  complete: Boolean!
  clientMutationId: String!
}

type ChangeBoardStatusPayload {
  viewer: User
  board: Board
  clientMutationId: String!
}

input MarkAllBoardsInput {
  complete: Boolean!
  clientMutationId: String!
}

type MarkAllBoardsPayload {
  viewer: User
  changedBoards: [Board]
  clientMutationId: String!
}

type Mutation {
  addBoard(input: AddBoardInput!): AddBoardPayload
  changeBoardStatus(input: ChangeBoardStatusInput!): ChangeBoardStatusPayload
  markAllBoards(input: MarkAllBoardsInput!): MarkAllBoardsPayload
  removeCompletedBoards(input: RemoveCompletedBoardsInput!): RemoveCompletedBoardsPayload
  removeBoard(input: RemoveBoardInput!): RemoveBoardPayload
  renameBoard(input: RenameBoardInput!): RenameBoardPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input RemoveBoardInput {
  id: ID!
  clientMutationId: String!
}

type RemoveBoardPayload {
  viewer: User
  deletedId: ID
  clientMutationId: String!
}

input RemoveCompletedBoardsInput {
  clientMutationId: String!
}

type RemoveCompletedBoardsPayload {
  viewer: User
  deletedIds: [String]
  clientMutationId: String!
}

input RenameBoardInput {
  id: ID!
  text: String!
  clientMutationId: String!
}

type RenameBoardPayload {
  board: Board
  clientMutationId: String!
}

type Root {
  viewer: User
  node(id: ID!): Node
}

type User implements Node {
  id: ID!
  boards(status: String = "any", before: String, after: String, first: Int, last: Int): BoardConnection
  numBoards: Int
  numCompletedBoards: Int
}
