input CheckHidingSpotForTreasureInput {
  id: ID!
  clientMutationId: String!
}

type CheckHidingSpotForTreasurePayload {
  hidingSpot: HidingSpot
  game: Game
  clientMutationId: String!
}

type Game implements Node {
  id: ID!
  hidingSpots(before: String, after: String, first: Int, last: Int): HidingSpotConnection
  turnsRemaining: Int
}

type HidingSpot implements Node {
  id: ID!
  hasBeenChecked: Boolean
  hasTreasure: Boolean
}

type HidingSpotConnection {
  pageInfo: PageInfo!
  edges: [HidingSpotEdge]
}

type HidingSpotEdge {
  node: HidingSpot
  cursor: String!
}

type Mutation {
  checkHidingSpotForTreasure(input: CheckHidingSpotForTreasureInput!): CheckHidingSpotForTreasurePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  game: Game
}
